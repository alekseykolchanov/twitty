//
//  TwittYxStyleKit.swift
//  TwittYx
//
//  Created by Aleksei Kolchanov on 28/08/16.
//  Copyright (c) 2016 Alkol. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class TwittYxStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let primaryColor: UIColor = UIColor(red: 0.114, green: 0.631, blue: 0.949, alpha: 1.000)
        static let secondaryColor: UIColor = UIColor(red: 0.161, green: 0.184, blue: 0.200, alpha: 1.000)
        static let darkGray: UIColor = UIColor(red: 0.533, green: 0.600, blue: 0.651, alpha: 1.000)
        static let lightGray: UIColor = UIColor(red: 0.667, green: 0.722, blue: 0.761, alpha: 1.000)
        static let extraLightGray: UIColor = UIColor(red: 0.882, green: 0.910, blue: 0.929, alpha: 1.000)
        static let extraExtraLightGray: UIColor = UIColor(red: 0.961, green: 0.973, blue: 0.980, alpha: 1.000)
        static let white: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static var imageOfPixelPrimaryColor: UIImage?
        static var pixelPrimaryColorTargets: [AnyObject]?
        static var imageOfSettingsIcon: UIImage?
        static var settingsIconTargets: [AnyObject]?
        static var imageOfSearchIcon: UIImage?
        static var searchIconTargets: [AnyObject]?
    }

    //// Colors

    public class var primaryColor: UIColor { return Cache.primaryColor }
    public class var secondaryColor: UIColor { return Cache.secondaryColor }
    public class var darkGray: UIColor { return Cache.darkGray }
    public class var lightGray: UIColor { return Cache.lightGray }
    public class var extraLightGray: UIColor { return Cache.extraLightGray }
    public class var extraExtraLightGray: UIColor { return Cache.extraExtraLightGray }
    public class var white: UIColor { return Cache.white }

    //// Drawing Methods

    public class func drawLogoBlue(frame frame: CGRect = CGRect(x: 0, y: 0, width: 49, height: 40)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 15.51, y: 40.07))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.90397 * frame.width, y: frame.minY + 0.28206 * frame.height), controlPoint1: CGPoint(x: 34.12, y: 40.07), controlPoint2: CGPoint(x: frame.minX + 0.90397 * frame.width, y: frame.minY + 0.61630 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.90337 * frame.width, y: frame.minY + 0.24936 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.90397 * frame.width, y: frame.minY + 0.27111 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.90397 * frame.width, y: frame.minY + 0.26021 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: 49.31, y: 4.74), controlPoint1: CGPoint(x: frame.minX + 0.94377 * frame.width, y: frame.minY + 0.21356 * frame.height), controlPoint2: CGPoint(x: 47.95, y: 6.77))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.88779 * frame.width, y: frame.minY + 0.15824 * frame.height), controlPoint1: CGPoint(x: 47.47, y: 5.56), controlPoint2: CGPoint(x: frame.minX + 0.92872 * frame.width, y: frame.minY + 0.15231 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.97856 * frame.width, y: frame.minY + 0.01834 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.93088 * frame.width, y: frame.minY + 0.12663 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.96315 * frame.width, y: frame.minY + 0.07689 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.84745 * frame.width, y: frame.minY + 0.07973 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.93803 * frame.width, y: frame.minY + 0.04780 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.89369 * frame.width, y: frame.minY + 0.06856 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.69690 * frame.width, y: frame.minY + 0.00000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.80841 * frame.width, y: frame.minY + 0.02888 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.75389 * frame.width, y: frame.minY + 0.00000 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.49023 * frame.width, y: frame.minY + 0.25317 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.58352 * frame.width, y: frame.minY + 0.00000 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.49023 * frame.width, y: frame.minY + 0.11429 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.49558 * frame.width, y: frame.minY + 0.31041 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.49023 * frame.width, y: frame.minY + 0.27244 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.49202 * frame.width, y: frame.minY + 0.29164 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.07004 * frame.width, y: frame.minY + 0.04615 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.32965 * frame.width, y: frame.minY + 0.30022 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.17483 * frame.width, y: frame.minY + 0.20408 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.13397 * frame.width, y: frame.minY + 0.38379 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.01555 * frame.width, y: frame.minY + 0.16106 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.04375 * frame.width, y: frame.minY + 0.30999 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.04026 * frame.width, y: frame.minY + 0.35213 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.10111 * frame.width, y: frame.minY + 0.38260 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.06897 * frame.width, y: frame.minY + 0.37174 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.04026 * frame.width, y: frame.minY + 0.35534 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.04026 * frame.width, y: frame.minY + 0.35317 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.04026 * frame.width, y: frame.minY + 0.35425 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.20590 * frame.width, y: frame.minY + 0.60328 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.04028 * frame.width, y: frame.minY + 0.47528 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.10993 * frame.width, y: frame.minY + 0.57953 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.11267 * frame.width, y: frame.minY + 0.60762 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.17551 * frame.width, y: frame.minY + 0.61344 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.14361 * frame.width, y: frame.minY + 0.61492 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.30558 * frame.width, y: frame.minY + 0.78327 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.13966 * frame.width, y: frame.minY + 0.71040 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.21746 * frame.width, y: frame.minY + 0.78124 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.04915 * frame.width, y: frame.minY + 0.89176 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.23248 * frame.width, y: frame.minY + 0.85365 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.14212 * frame.width, y: frame.minY + 0.89187 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.00000 * frame.width, y: frame.minY + 0.88811 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.03272 * frame.width, y: frame.minY + 0.89172 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.01631 * frame.width, y: frame.minY + 0.89050 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: 15.51, y: 40.06), controlPoint1: CGPoint(x: frame.minX + 0.09441 * frame.width, y: frame.minY + 0.96233 * frame.height), controlPoint2: CGPoint(x: 10.01, y: 40.07))
        TwittYxStyleKit.primaryColor.setFill()
        bezierPath.fill()
    }

    public class func drawLogoWhite(frame frame: CGRect = CGRect(x: 0, y: 0, width: 49, height: 40)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 15.51, y: 40.07))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.90397 * frame.width, y: frame.minY + 0.28206 * frame.height), controlPoint1: CGPoint(x: 34.12, y: 40.07), controlPoint2: CGPoint(x: frame.minX + 0.90397 * frame.width, y: frame.minY + 0.61630 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.90337 * frame.width, y: frame.minY + 0.24936 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.90397 * frame.width, y: frame.minY + 0.27111 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.90397 * frame.width, y: frame.minY + 0.26021 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: 49.31, y: 4.74), controlPoint1: CGPoint(x: frame.minX + 0.94377 * frame.width, y: frame.minY + 0.21356 * frame.height), controlPoint2: CGPoint(x: 47.95, y: 6.77))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.88779 * frame.width, y: frame.minY + 0.15824 * frame.height), controlPoint1: CGPoint(x: 47.47, y: 5.56), controlPoint2: CGPoint(x: frame.minX + 0.92872 * frame.width, y: frame.minY + 0.15231 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.97856 * frame.width, y: frame.minY + 0.01834 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.93088 * frame.width, y: frame.minY + 0.12663 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.96315 * frame.width, y: frame.minY + 0.07689 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.84745 * frame.width, y: frame.minY + 0.07973 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.93803 * frame.width, y: frame.minY + 0.04780 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.89369 * frame.width, y: frame.minY + 0.06856 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.69690 * frame.width, y: frame.minY + 0.00000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.80841 * frame.width, y: frame.minY + 0.02888 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.75389 * frame.width, y: frame.minY + 0.00000 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.49023 * frame.width, y: frame.minY + 0.25317 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.58352 * frame.width, y: frame.minY + 0.00000 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.49023 * frame.width, y: frame.minY + 0.11429 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.49558 * frame.width, y: frame.minY + 0.31041 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.49023 * frame.width, y: frame.minY + 0.27244 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.49202 * frame.width, y: frame.minY + 0.29164 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.07004 * frame.width, y: frame.minY + 0.04615 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.32965 * frame.width, y: frame.minY + 0.30022 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.17483 * frame.width, y: frame.minY + 0.20408 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.13397 * frame.width, y: frame.minY + 0.38379 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.01555 * frame.width, y: frame.minY + 0.16106 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.04375 * frame.width, y: frame.minY + 0.30999 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.04026 * frame.width, y: frame.minY + 0.35213 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.10111 * frame.width, y: frame.minY + 0.38260 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.06897 * frame.width, y: frame.minY + 0.37174 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.04026 * frame.width, y: frame.minY + 0.35534 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.04026 * frame.width, y: frame.minY + 0.35317 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.04026 * frame.width, y: frame.minY + 0.35425 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.20590 * frame.width, y: frame.minY + 0.60328 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.04028 * frame.width, y: frame.minY + 0.47528 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.10993 * frame.width, y: frame.minY + 0.57953 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.11267 * frame.width, y: frame.minY + 0.60762 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.17551 * frame.width, y: frame.minY + 0.61344 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.14361 * frame.width, y: frame.minY + 0.61492 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.30558 * frame.width, y: frame.minY + 0.78327 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.13966 * frame.width, y: frame.minY + 0.71040 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.21746 * frame.width, y: frame.minY + 0.78124 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.04915 * frame.width, y: frame.minY + 0.89176 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.23248 * frame.width, y: frame.minY + 0.85365 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.14212 * frame.width, y: frame.minY + 0.89187 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.00000 * frame.width, y: frame.minY + 0.88811 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.03272 * frame.width, y: frame.minY + 0.89172 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.01631 * frame.width, y: frame.minY + 0.89050 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: 15.51, y: 40.06), controlPoint1: CGPoint(x: frame.minX + 0.09441 * frame.width, y: frame.minY + 0.96233 * frame.height), controlPoint2: CGPoint(x: 10.01, y: 40.07))
        TwittYxStyleKit.white.setFill()
        bezierPath.fill()
    }

    public class func drawPixelPrimaryColor() {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 1))
        TwittYxStyleKit.primaryColor.setFill()
        rectanglePath.fill()
    }

    public class func drawSettingsIcon() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 11.64, y: 0.14))
        bezierPath.addCurveToPoint(CGPoint(x: 8.3, y: 0.14), controlPoint1: CGPoint(x: 10.54, y: -0.05), controlPoint2: CGPoint(x: 9.41, y: -0.05))
        bezierPath.addLineToPoint(CGPoint(x: 7.97, y: 2.39))
        bezierPath.addCurveToPoint(CGPoint(x: 5.29, y: 3.68), controlPoint1: CGPoint(x: 7, y: 2.65), controlPoint2: CGPoint(x: 6.09, y: 3.09))
        bezierPath.addLineToPoint(CGPoint(x: 3.33, y: 2.54))
        bezierPath.addCurveToPoint(CGPoint(x: 1.24, y: 5.15), controlPoint1: CGPoint(x: 2.49, y: 3.28), controlPoint2: CGPoint(x: 1.79, y: 4.17))
        bezierPath.addLineToPoint(CGPoint(x: 2.8, y: 6.81))
        bezierPath.addCurveToPoint(CGPoint(x: 2.14, y: 9.71), controlPoint1: CGPoint(x: 2.4, y: 7.72), controlPoint2: CGPoint(x: 2.17, y: 8.71))
        bezierPath.addLineToPoint(CGPoint(x: 0.02, y: 10.53))
        bezierPath.addCurveToPoint(CGPoint(x: 0.76, y: 13.79), controlPoint1: CGPoint(x: 0.08, y: 11.65), controlPoint2: CGPoint(x: 0.33, y: 12.75))
        bezierPath.addLineToPoint(CGPoint(x: 3.03, y: 13.61))
        bezierPath.addCurveToPoint(CGPoint(x: 4.88, y: 15.93), controlPoint1: CGPoint(x: 3.49, y: 14.49), controlPoint2: CGPoint(x: 4.12, y: 15.28))
        bezierPath.addLineToPoint(CGPoint(x: 4.2, y: 18.1))
        bezierPath.addCurveToPoint(CGPoint(x: 7.21, y: 19.55), controlPoint1: CGPoint(x: 5.12, y: 18.75), controlPoint2: CGPoint(x: 6.13, y: 19.24))
        bezierPath.addLineToPoint(CGPoint(x: 8.48, y: 17.67))
        bezierPath.addCurveToPoint(CGPoint(x: 11.46, y: 17.67), controlPoint1: CGPoint(x: 9.47, y: 17.86), controlPoint2: CGPoint(x: 10.47, y: 17.86))
        bezierPath.addLineToPoint(CGPoint(x: 12.73, y: 19.55))
        bezierPath.addCurveToPoint(CGPoint(x: 15.74, y: 18.1), controlPoint1: CGPoint(x: 13.81, y: 19.24), controlPoint2: CGPoint(x: 14.83, y: 18.75))
        bezierPath.addLineToPoint(CGPoint(x: 15.06, y: 15.93))
        bezierPath.addCurveToPoint(CGPoint(x: 16.91, y: 13.61), controlPoint1: CGPoint(x: 15.82, y: 15.28), controlPoint2: CGPoint(x: 16.45, y: 14.49))
        bezierPath.addLineToPoint(CGPoint(x: 19.18, y: 13.79))
        bezierPath.addCurveToPoint(CGPoint(x: 19.93, y: 10.53), controlPoint1: CGPoint(x: 19.61, y: 12.75), controlPoint2: CGPoint(x: 19.86, y: 11.65))
        bezierPath.addLineToPoint(CGPoint(x: 17.8, y: 9.71))
        bezierPath.addCurveToPoint(CGPoint(x: 17.14, y: 6.81), controlPoint1: CGPoint(x: 17.77, y: 8.71), controlPoint2: CGPoint(x: 17.55, y: 7.72))
        bezierPath.addLineToPoint(CGPoint(x: 18.7, y: 5.15))
        bezierPath.addCurveToPoint(CGPoint(x: 16.61, y: 2.54), controlPoint1: CGPoint(x: 18.15, y: 4.17), controlPoint2: CGPoint(x: 17.45, y: 3.28))
        bezierPath.addLineToPoint(CGPoint(x: 14.65, y: 3.68))
        bezierPath.addCurveToPoint(CGPoint(x: 11.97, y: 2.39), controlPoint1: CGPoint(x: 13.85, y: 3.09), controlPoint2: CGPoint(x: 12.94, y: 2.65))
        bezierPath.addLineToPoint(CGPoint(x: 11.64, y: 0.14))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 9.97, y: 5.59))
        bezierPath.addCurveToPoint(CGPoint(x: 14.35, y: 9.97), controlPoint1: CGPoint(x: 12.39, y: 5.59), controlPoint2: CGPoint(x: 14.35, y: 7.55))
        bezierPath.addCurveToPoint(CGPoint(x: 9.97, y: 14.35), controlPoint1: CGPoint(x: 14.35, y: 12.39), controlPoint2: CGPoint(x: 12.39, y: 14.35))
        bezierPath.addCurveToPoint(CGPoint(x: 5.59, y: 9.97), controlPoint1: CGPoint(x: 7.55, y: 14.35), controlPoint2: CGPoint(x: 5.59, y: 12.39))
        bezierPath.addCurveToPoint(CGPoint(x: 9.97, y: 5.59), controlPoint1: CGPoint(x: 5.59, y: 7.55), controlPoint2: CGPoint(x: 7.55, y: 5.59))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        TwittYxStyleKit.primaryColor.setFill()
        bezierPath.fill()
    }

    public class func drawSearchIcon() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 11.64, y: 13.76))
        bezierPath.addCurveToPoint(CGPoint(x: 7.5, y: 15), controlPoint1: CGPoint(x: 10.45, y: 14.54), controlPoint2: CGPoint(x: 9.03, y: 15))
        bezierPath.addCurveToPoint(CGPoint(x: 0, y: 7.5), controlPoint1: CGPoint(x: 3.36, y: 15), controlPoint2: CGPoint(x: 0, y: 11.64))
        bezierPath.addCurveToPoint(CGPoint(x: 7.5, y: 0), controlPoint1: CGPoint(x: 0, y: 3.36), controlPoint2: CGPoint(x: 3.36, y: 0))
        bezierPath.addCurveToPoint(CGPoint(x: 15, y: 7.5), controlPoint1: CGPoint(x: 11.64, y: 0), controlPoint2: CGPoint(x: 15, y: 3.36))
        bezierPath.addCurveToPoint(CGPoint(x: 13.76, y: 11.64), controlPoint1: CGPoint(x: 15, y: 9.03), controlPoint2: CGPoint(x: 14.54, y: 10.45))
        bezierPath.addLineToPoint(CGPoint(x: 19.58, y: 17.46))
        bezierPath.addCurveToPoint(CGPoint(x: 19.58, y: 19.2), controlPoint1: CGPoint(x: 20.06, y: 17.94), controlPoint2: CGPoint(x: 20.06, y: 18.72))
        bezierPath.addLineToPoint(CGPoint(x: 19.2, y: 19.58))
        bezierPath.addCurveToPoint(CGPoint(x: 17.46, y: 19.58), controlPoint1: CGPoint(x: 18.72, y: 20.06), controlPoint2: CGPoint(x: 17.94, y: 20.06))
        bezierPath.addLineToPoint(CGPoint(x: 11.64, y: 13.76))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 7.5, y: 2))
        bezierPath.addCurveToPoint(CGPoint(x: 13, y: 7.5), controlPoint1: CGPoint(x: 10.54, y: 2), controlPoint2: CGPoint(x: 13, y: 4.46))
        bezierPath.addCurveToPoint(CGPoint(x: 7.5, y: 13), controlPoint1: CGPoint(x: 13, y: 10.54), controlPoint2: CGPoint(x: 10.54, y: 13))
        bezierPath.addCurveToPoint(CGPoint(x: 2, y: 7.5), controlPoint1: CGPoint(x: 4.46, y: 13), controlPoint2: CGPoint(x: 2, y: 10.54))
        bezierPath.addCurveToPoint(CGPoint(x: 7.5, y: 2), controlPoint1: CGPoint(x: 2, y: 4.46), controlPoint2: CGPoint(x: 4.46, y: 2))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        TwittYxStyleKit.primaryColor.setFill()
        bezierPath.fill()
    }

    //// Generated Images

    public class func imageOfLogoBlue(frame frame: CGRect = CGRect(x: 0, y: 0, width: 49, height: 40)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            TwittYxStyleKit.drawLogoBlue(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfLogoBlue = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfLogoBlue
    }

    public class func imageOfLogoWhite(frame frame: CGRect = CGRect(x: 0, y: 0, width: 49, height: 40)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            TwittYxStyleKit.drawLogoWhite(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfLogoWhite = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfLogoWhite
    }

    public class var imageOfPixelPrimaryColor: UIImage {
        if Cache.imageOfPixelPrimaryColor != nil {
            return Cache.imageOfPixelPrimaryColor!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 1, height: 1), false, 0)
            TwittYxStyleKit.drawPixelPrimaryColor()

        Cache.imageOfPixelPrimaryColor = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfPixelPrimaryColor!
    }

    public class var imageOfSettingsIcon: UIImage {
        if Cache.imageOfSettingsIcon != nil {
            return Cache.imageOfSettingsIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            TwittYxStyleKit.drawSettingsIcon()

        Cache.imageOfSettingsIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfSettingsIcon!
    }

    public class var imageOfSearchIcon: UIImage {
        if Cache.imageOfSearchIcon != nil {
            return Cache.imageOfSearchIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            TwittYxStyleKit.drawSearchIcon()

        Cache.imageOfSearchIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfSearchIcon!
    }

    //// Customization Infrastructure

    @IBOutlet var pixelPrimaryColorTargets: [AnyObject]! {
        get { return Cache.pixelPrimaryColorTargets }
        set {
            Cache.pixelPrimaryColorTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: TwittYxStyleKit.imageOfPixelPrimaryColor)
            }
        }
    }

    @IBOutlet var settingsIconTargets: [AnyObject]! {
        get { return Cache.settingsIconTargets }
        set {
            Cache.settingsIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: TwittYxStyleKit.imageOfSettingsIcon)
            }
        }
    }

    @IBOutlet var searchIconTargets: [AnyObject]! {
        get { return Cache.searchIconTargets }
        set {
            Cache.searchIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: TwittYxStyleKit.imageOfSearchIcon)
            }
        }
    }

}
